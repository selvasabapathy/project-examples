pipeline {
    agent any

    stages {
        stage ('Clone') {
            steps {
                git branch: 'go-dev', url: "https://github.com/jfrog/project-examples.git"
            }
        }

        stage ('Config') {
            steps {
                echo 'Configure artifactory deployer and resolver...'
                //                 rtServer (
                //                     id: "ARTIFACTORY_SERVER",
                //                     url: 'http://10.176.0.212',
                //                     credentialsId: 'artifactoryCredentials'
                //                 )
                rtGoResolver (
                    id: "GO_RESOLVER",
                    serverId: "ARTIFACTORY_SERVER",
                    repo: "go-remote"
                )
                rtGoDeployer (
                    id: "GO_DEPLOYER",
                    serverId: "ARTIFACTORY_SERVER",
                    repo: "pe-go-dev-local"
                )
            }
        }

        stage ('Build') {
            steps {
                echo 'Build the application...'
                rtGoRun (
                    path: "golang-example/hello",
                    resolverId: "GO_RESOLVER",
                    args: "build"
                )
            }
        }

        stage ('Publish') {
            steps {
                echo 'Push build info to artifactory...'
                rtGoPublish (
                    path: "golang-example/hello",
                    deployerId: "GO_DEPLOYER",
                    version: "1.0.0"
                )
            }
        }

        stage ('Build info') {
            steps {
                rtPublishBuildInfo (
                    serverId: "ARTIFACTORY_SERVER"
                )
            }
        }

        stage ('Scan') {
            steps {
                echo 'Scan for security & license...'
                xrayScan (
                    serverId: "ARTIFACTORY_SERVER",
                    failBuild: false
                )
            }
        }
    }
}